import numpy as np
import pandas as pd
import yfinance as yf
import random
from collections import deque
import tensorflow as tf
from keras import layers, models

# Define the trading environment
class TradingEnvironment:
    def __init__(self, price_data, initial_investment=10000):
        self.price_data = price_data
        self.initial_investment = initial_investment
        self.reset()

    def reset(self):
        self.current_step = 0
        self.balance = self.initial_investment
        self.shares_owned = 0
        self.total_value = self.initial_investment
        self.done = False
        return self.get_state()

    def get_state(self):
        # Get the current state
        return np.array([self.price_data['Close'].iloc[self.current_step],
                         self.balance,
                         self.shares_owned])

    def step(self, action):
        current_price = self.price_data['Close'].iloc[self.current_step]
        reward = 0

        if action == 0:  # Buy
            if self.balance >= current_price:  # Check if can buy
                self.shares_owned += 1
                self.balance -= current_price
                reward = 0  # Immediate reward could be zero

        elif action == 1:  # Sell
            if self.shares_owned > 0:  # Check if can sell
                self.shares_owned -= 1
                self.balance += current_price
                reward = current_price  # Reward based on the current price

        # Update total value
        self.total_value = self.balance + (self.shares_owned * current_price)

        # Move to the next step
        self.current_step += 1
        if self.current_step >= len(self.price_data) - 1:
            self.done = True

        return self.get_state(), reward, self.done

# DQN Agent
class DQNAgent:
    def __init__(self, state_size, action_size):
        self.state_size = state_size
        self.action_size = action_size
        self.memory = deque(maxlen=2000)
        self.gamma = 0.95  # Discount rate
        self.epsilon = 1.0  # Exploration rate
        self.epsilon_min = 0.01
        self.epsilon_decay = 0.995
        self.model = self._build_model()

    def _build_model(self):
        model = models.Sequential()
        model.add(layers.Dense(24, input_dim=self.state_size, activation='relu'))
        model.add(layers.Dense(24, activation='relu'))
        model.add(layers.Dense(self.action_size, activation='linear'))
        # Change lr to learning_rate
        model.compile(loss='mse', optimizer=tf.keras.optimizers.Adam(learning_rate=0.001))
        return model

    def remember(self, state, action, reward, next_state, done):
        self.memory.append((state, action, reward, next_state, done))

    def replay(self):
        if len(self.memory) < 32:
            return

        minibatch = random.sample(self.memory, 32)
        for state, action, reward, next_state, done in minibatch:
            target = reward
            if not done:
                target += self.gamma * np.max(self.model.predict(next_state.reshape(1, self.state_size), verbose=0))
            target_f = self.model.predict(state.reshape(1, self.state_size), verbose=0)
            target_f[0][action] = target
            self.model.fit(state.reshape(1, self.state_size), target_f, epochs=1, verbose=0)

    def act(self, state):
        if np.random.rand() <= self.epsilon:
            return random.randrange(self.action_size)
        act_values = self.model.predict(state.reshape(1, self.state_size), verbose=0)
        return np.argmax(act_values[0])

    def update_epsilon(self):
        if self.epsilon > self.epsilon_min:
            self.epsilon *= self.epsilon_decay

# Process a single episode
def process_episode(env, agent, initial_investment):
    state = env.reset()
    total_reward = 0
    trade_count = 0
    wins = 0
    losses = 0
    episode_returns = []
    max_drawdown = 0
    peak_value = initial_investment

    while True:
        action = agent.act(state)
        next_state, reward, done = env.step(action)

        agent.remember(state, action, reward, next_state, done)

        total_reward += reward
        episode_returns.append(env.total_value)
        if env.total_value > peak_value:
            peak_value = env.total_value
        drawdown = (peak_value - env.total_value) / peak_value
        if drawdown > max_drawdown:
            max_drawdown = drawdown

        if reward > 0:
            wins += 1
        elif reward < 0:
            losses += 1

        state = next_state

        if done:
            break

    agent.update_epsilon()
    return total_reward, trade_count, wins, losses, episode_returns, max_drawdown

# Training function
def train_agent(env, agent, episodes=1000):
    for episode in range(episodes):
        total_reward, trade_count, wins, losses, episode_returns, max_drawdown = process_episode(env, agent, env.initial_investment)
        
        if episode % 100 == 0:
            print(f"Episode: {episode}, Total Reward: {total_reward}, Trades: {trade_count}, Wins: {wins}, Losses: {losses}, Max Drawdown: {max_drawdown:.2f}")

        agent.replay()

# Initialize environment and agent
price_data = yf.download("AAPL", start="2020-01-01", end="2023-01-01")  # Example price data
env = TradingEnvironment(price_data, initial_investment=10000)
agent = DQNAgent(state_size=3, action_size=2)  # 3 states (price, balance, shares), 2 actions (buy, sell)

# Train the agent
train_agent(env, agent, episodes=1000)
